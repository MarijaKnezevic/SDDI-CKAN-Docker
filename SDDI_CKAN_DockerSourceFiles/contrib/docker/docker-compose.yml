# docker-compose build && docker-compose up -d
# If "docker-compose logs ckan" shows DB not ready, run "docker-compose restart ckan" a few times.
version: "3"

volumes:
  ckan_config:
  ckan_home:
  ckan_storage:
  pg_data:
  solr_data:

services:
  ckan:
    container_name: ckan
    build:
      context: ../../
      args:
          - CKAN_SITE_URL=${CKAN_SITE_URL}
    networks:
      - frontend
      - backend
    depends_on:
      - db
    #command: ["/wait-for-psql.sh", "30", "localhost", "5432", "ckan", "ckan"]
    ports:
      - "0.0.0.0:${CKAN_PORT}:5000"
    environment:
      # Defaults work with linked containers, change to use own Postgres, SolR, Redis or Datapusher
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@db/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
    #   - CKAN_DATAPUSHER_URL=http://datapusher:8800
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
    restart: always
    volumes:
      - ckan_config:/etc/ckan
      - ckan_home:/usr/lib/ckan
      - ckan_storage:/var/lib/ckan

  # datapusher:
  #   container_name: datapusher
  #   image: clementmouchet/datapusher
  #   ports:
  #     - "8800:8800"

  db:
    container_name: db
    build:
      context: .
      dockerfile: postgresql/Dockerfile
      args:
        - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    environment:
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/db
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ckan"]
# In case you are using Windows 10 and Docker Desktop you may not be able to use named volume. So comment volume pg_data (lines 9 and 61) and instead uncomment line 63. This should do the job for now. It is a known bug for Windows docker. Please frequently check for a proper solution!
      #- ./postgres_data1:/var/lib/postgresql/data

  solr:
    container_name: solr
    build:
      context: .
      dockerfile: solr/Dockerfile
    networks:
      - backend
    restart: always
    volumes:
      - solr_data:/opt/solr/server/solr/ckan/data
    #ports:
    #  - "8983:8983"


  redis:
    container_name: redis
    image: redis:latest
    networks:
      - backend
    restart: always

networks:
  frontend:
  backend: